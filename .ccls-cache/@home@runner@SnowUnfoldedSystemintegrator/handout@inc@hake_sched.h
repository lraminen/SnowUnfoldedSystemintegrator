/* DO NOT EDIT THIS FILE
 * - hake_sched.h (Part of the Hake Scheduler)
 * - Copyright: Prof. Kevin Andrea, George Mason University.  All Rights Reserved
 * - Date: Aug 2023
 *
 *   Definitions for the Hake Scheduler System
 *   (Dependency - TRILBY VM Settings)
 */

#ifndef HAKE_SCHED_H
#define HAKE_SCHED_H

#include "vm_settings.h"

// Process Node Definition
typedef struct process_node {
  pid_t pid;          // PID of the Process you're Tracking
  char *cmd;          // Name of the Process being run
  unsigned int state; // Contains the Process Flags [R,U,S,T,C] AND Exit Code
  int priority;       // The Priority Level of the Process
  int age;            // How long this has been in the Ready Queue.
  struct process_node *next; // Pointer to next Process Node in a linked list.
} Hake_process_s;

// Queue Header Definition
typedef struct queue_header {
  int count;            // How many Nodes are in this linked list?
  Hake_process_s *head; // Points to FIRST node of linked list.  No Dummy Nodes.
} Hake_queue_s;

// Schedule Header Definition
typedef struct hake_schedule {
  Hake_queue_s *ready_queue;      // Linked List of Processes ready to Run on CPU
  Hake_queue_s *suspended_queue;  // Linked List of Suspended Processes
  Hake_queue_s *terminated_queue; // Linked List of Terminated Processes 
} Hake_schedule_s;

// Prototypes
Hake_schedule_s *hake_create();
Hake_process_s *hake_new_process(char *command, pid_t pid, int priority, int is_critical);
int hake_insert(Hake_schedule_s *schedule, Hake_process_s *process);
int hake_get_count(Hake_queue_s *queue);
Hake_process_s *hake_select(Hake_schedule_s *schedule);
int hake_suspend(Hake_schedule_s *header, pid_t pid);
int hake_resume(Hake_schedule_s *header, pid_t pid);
int hake_exited(Hake_schedule_s *schedule, Hake_process_s *process, int exit_code);
int hake_terminated(Hake_schedule_s *schedule, pid_t pid, int exit_code);
void hake_deallocate(Hake_schedule_s *schedule);

#endif
