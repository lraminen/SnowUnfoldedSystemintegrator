/* DO NOT EDIT THIS FILE
 * - vm_support.h (Trilby VM)
 * - Copyright: Prof. Kevin Andrea, George Mason University.  All Rights Reserved
 * - Date: Aug 2023
 *
 *   Macros for Printing/Debugging within TRILBY VM
 *   Dependencies - Hake Process Scheduler
 */

#ifndef VM_SUPPORT_H
#define VM_SUPPORT_H

#include "hake_sched.h"
#include "vm_printing.h"

// Adds the __FILE__ from current location before calling abort_error
#define ABORT_ERROR(str) abort_error(str, __FILE__)

// Prints an Informational Message with printf-style formatting arguments
#define PRINT_INFO(str, ...) do {               \
  printf("  %s[Info ]%s ", GREEN, YELLOW);     \
  printf(str, ##__VA_ARGS__);                   \
  printf("%s\n", RST);                          \
} while(0) 

// If Debug is on, Prints a Debug Message with printf-style formatting arguments
#define PRINT_DEBUG(str, ...) do {              \
  printf(g_debug_mode?"  %s[DEBUG ]%s ":"", CYAN, YELLOW);      \
  printf(g_debug_mode?str:"", ##__VA_ARGS__);                   \
  printf(g_debug_mode?"%s\n":"", RST);                          \
} while(0) 

// Prints a Status Message with printf-style formatting arguments
#define PRINT_STATUS(str, ...) do {             \
  printf("  %s[Status]%s ", YELLOW, YELLOW);    \
  printf(str, ##__VA_ARGS__);                   \
  printf("%s\n", RST);                          \
} while(0) 

// Prints a Warning Message with printf-style formatting arguments
#define PRINT_WARNING(str, ...) do {            \
  printf("  %s[Warn  ]%s ", MAGENTA, YELLOW);   \
  printf(str, ##__VA_ARGS__);                   \
  printf("%s\n", RST);                          \
} while(0) 

// Prints a Message with Context, with printf-style formatting arguments
#define MARK(str, ...) do {                    \
  printf("  %s[MARK]%s ", MAGENTA, RST);       \
  printf(str, ##__VA_ARGS__);                  \
  printf("    %s{%s:%d in %s}%s\n", MAGENTA, __FILE__, __LINE__, __func__, RST); \
} while(0) 

// Shared Function Prototypes
void register_signal(int sig, void (*handler)(int));
void print_prompt();
void abort_error(char *msg, char *src);
void print_trilby_banner();
void print_hake_debug(Hake_schedule_s *schedule, Hake_process_s *on_cpu);
void print_schedule(Hake_schedule_s *schedule, Hake_process_s *on_cpu);
void print_hake_queue(Hake_queue_s *queue);
void print_process_node(Hake_process_s *node);

#endif
